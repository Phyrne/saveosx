#! /bin/bash

# Ensure script is not being run with root privileges
if [[ $EUID -eq 0 ]]; then
   echo "Please don't run this script with root priveleges!"
   exit 1
fi


# Fancy title function
title() {
  COLUMNS=$(tput cols)
  tput clear
  Y=$((($COLUMNS-${#MESSAGE})/2))
  X=1
  tput cup $X $Y
  echo -e "${MESSAGE}"
}

# Safe run function to ensure commands are executed successfully
saferun() {
  typeset cmnd="$*"
  typeset ret_code

  eval  $cmnd
  ret_code=$?
  
  if [ $ret_code != 0 ]; then
     echo -e ""$RED_UL"\n\nIt looks like there was an issue "$ERR_MSG"!"$ESC"\n\nExiting..."
     exit $?
  fi
}

# ANSI properties/colours
ESC='\033[0m'
BOLD='\033[1m'
BLUE='\033[38;34m'
BLUE_UL='\033[38;4;34m'
GREEN='\033[38;32m'
GREEN_UL='\033[38;4;32m'
CYAN='\033[38;36m'
CYAN_UL='\033[38;4;36m'
RED='\033[38;31m'
RED_UL='\033[38;4;31m'
PURPLE='\033[38;35m'
PURPLE_UL='\033[38;4;35m'
YELLOW='\033[38;33m'
YELLOW_UL='\033[38;4;33m'

# First, drop any chached sudo access (sudo does not require a password to perform this function)
sudo -k

# Welcome screen
MESSAGE=""$BLUE_UL"Welcome to Save OS X!"$ESC""

title
echo ''
echo -e "Here's some stuff about the project that will be echo'd\non the first screen of the script\n"
echo ''
ERR_MSG="authenticating sudo access.\nPlease ensure you typed your password correctly" # Set error message to be echo'd should sudo authentication fail
echo "Please enter your password for sudo authentication"
saferun sudo echo "sudo authenticaion successful!" # Prompt for initial sudo password (will be updated througout with `sudo -v`)
echo ''
read -r -p "Press [Enter] to continue..."
clear

# Grab essential tools (pkgsrc & Xquartz)
MESSAGE=""$RED_UL"Essential Tools$ESC"
title
echo ''
echo -e ""$BLUE"This project uses pkgsrc & XQuartz"$ESC"\n"
echo ''
echo -e ""$YELLOW_UL"pkgsrc"$ESC""
echo "pkgsrc is a framework for building third-party software on NetBSD and other UNIX-like systems,"
echo "currently containing over 12000 packages. It is used to enable freely available software to be"
echo "configured and built easily on supported platforms."
echo ''
echo -e ""$YELLOW_UL"XQuartz"$ESC""
echo "XQuartz is an open-source effort to develop a version of the X.Org X Window System that runs on OS X."
echo "Together with supporting libraries and applications, it forms the X11.app that Apple has shipped with"
echo "OS X since version 10.5. "
echo ''
echo "Proceeding to download and install essential tools"
echo ''
sudo -v # Keep sudo authentication open

# Download and install pkgsrc
echo "Fetching pkgsrc from the Save OS X repo..."
ERR_MSG="retrieving the boostrap tarball from the Save OS X repo" # Set the error message to be echo'd should the curl fail

# Check architecture
if [[ $(uname -m) == 'x86_64' ]] ; then
  saferun curl -s -o /tmp/bootstrap.tar.gz http://pkgsrc.saveosx.org/Darwin/bootstrap/bootstrap-x86_64.tar.gz # Safely attempt to retrive the x86_64 pkgsrc bootstrapper from the Save OS X repo, if it fails, exit
else
  echo ""$RED_UL"We only support x86_64 systems!"$ESC""
fi

sudo -v # Keep sudo authentication open

# Check for Home Brew install
if [[ $(which brew | awk -F/ '{print$NF}' | grep -v 'not found') == 'brew' ]]; then
    BREW_INSTALLED="true"
  else
    BREW_INSTALLED="false"
fi

# If the 'brew' binary is found, echo instructions on removal and exit
if [[ $(echo $BREW_INSTALLED) == 'true' ]]; then
  echo ''
  echo -e ""$RED"It looks like you have Home Brew installed. This could seriously conflict with pkgsrc!"
  echo -e "As we don't wish to affect what you may have implemented, we'll leave it up to you to" 
  echo -e "remove it."$ESC""
  echo ''
  echo -e ""$BLUE_UL"Once your system is rid of Home Brew; simply re-run this script to get going again!"$ESC""
  echo ''
  echo "For now, here are the steps you need to take (with root privileges) to eradicate Home Brew from your system:"
  echo ''
  echo -e "cd \`brew --prefix\`\nrm -rf Cellar\nbrew prune\nrm \`git ls-files\`"
  echo -e "rm -rf Library/{Homebrew,Aliases,Formula,Contributions}"
  echo -e "rm -rf .git"
  echo -e "rm -rf ~/Library/Caches/Homebrew"
  echo ''
  echo -e ""$RED_UL"WARNING"$ESC""$RED":  This will remove all software installed with Home Brew!"$ESC""
  exit 1
fi

# Check for MacPorts install
if [[ $(which port | awk -F/ '{print$NF}' | grep -v 'not found') == 'port' ]]; then
    PORTS_INSTALLED="true"
  else
    PORTS_INSTALLED="false"
fi

# If the 'port' binary is found, echo instructions on removal and exit

if [[ $(echo $PORTS_INSTALLED) == 'true' ]]; then
  echo ''
  echo -e ""$RED"It looks like you have MacPorts installed. This could seriously conflict with pkgsrc!"
  echo -e "As we don't wish to affect what you may have implemented, we'll leave it up to you to" 
  echo -e "remove it."$ESC""
  echo ''
  echo -e ""$BLUE_UL"Once your system is rid of MacPorts; simply re-run this script to get going again!"$ESC""
  echo ''
  echo "For now, here are the steps you need to take (with root privileges) to eradicate MacPorts from your system:"
  echo ''
  echo -e "port -fp uninstall installed"
  echo -e "rm -rf /opt/local"
  echo -e "rm -rf /Applications/{DarwinPorts,MacPorts}"
  echo -e "rm -rf /Library/{LaunchDaemons/org.macports.*,Receipts/DarwinPorts*.pkg,\\"
  echo -e "Receipts/MacPorts*.pkg,Receipts/MacPorts*.pkg,Tcl/darwinports1.0,Tcl/macports1.0}"
  echo -e "rm -rf ~/.macports"
  echo ''
  echo -e ""$RED_UL"WARNING"$ESC""$RED":  This will remove all software installed with MacPorts!"$ESC""
  exit 1
fi


echo -e "pkgsrc retrieved successfully, proceeding to install...\n"
cd /; sudo tar xf /tmp/bootstrap.tar.gz 2>&1 > /dev/null # extract the pkgsrc bootstrap in the root directory
echo -e "\n"$GREEN"pkgsrc installed."$ESC" Adding Save OS X repo..."
sudo chmod a+w /usr/pkg/etc/pkgin/repositories.conf   # Temporarily drop permissions

# Add Save OS X repo
if [[ $(uname -m) == 'x86_64' ]]; then
    echo "http://pkgsrc.saveosx.org/Darwin/2013Q3/x86_64/All/" >> /usr/pkg/etc/pkgin/repositories.conf           # No sudo access to file
else
  echo ""$RED_UL"We only support x86_64 systems!"$ESC""
  exit 1
fi
sudo chmod og-w /usr/pkg/etc/pkgin/repositories.conf # Change permissions back
echo ''
sudo -v # Keep sudo authentication open
echo "Updating pkgsrc repository information..."
sudo /usr/pkg/bin/pkgin -y update # Update the pkgsrc repository information
sudo -v # Keep sudo authentication open
echo ''

# Fetch & install XQuartz if it isn't already installed
if [[ $(system_profiler SPApplicationsDataType | grep XQuartz 2> /dev/null | wc -l) -lt 1 ]] && [[ $(pkgin list | grep -i 'xquartz' | wc -l) -lt 1  ]]; then
  echo ''
  ERR_MSG="installing XQuartz"
  echo "Installing XQuartz..."
  saferun pkgin -y in xquartz
sudo -v # Keep sudo authentication open
  echo -e "\n"$GREEN"XQuartz installed successfully!"$ESC""
  export PATH=/usr/pkg/bin:/usr/pkg/sbin:/opt/X11/bin:$PATH # Update path so new binaries can be found (including X11 apps)
  umount /Volumes/xquartz
else
  echo ''
  echo -e "\n"$GREEN"It looks like XQuartz is already installed..."$ESC""
  export PATH=/usr/pkg/bin:/usr/pkg/sbin:$PATH # Update path to so new binaries can be found (not including X11 apps)
fi
read -r -p "Press [Enter] to continute..."
sudo -v # Keep sudo authentication open

# Git screen
MESSAGE=""$GREEN_UL"Git"$ESC""

title
echo
echo "Using Save OS X requires Git. Apple's implementation of Git is"
echo "included with XCode. Unless you're a developer of software for"
echo "OS X/iOS, this isn't necessary"
echo ''
echo "Even if you do have XCode intalled, installing Git from pkgsrc"
echo "will get you a more recent revision."
echo ''

sudo -v # Keep sudo authentication open

# Ask user if they would like to install Git from pkgsrc
while :
do
  read -r -p "Would you like to install Git from pkgsrc? [y/n] " ANSWER
    case $ANSWER in
      [yY][eE][sS]|[yY])
          ERR_MSG="installing Git with pkgin"
          echo ''
          echo -e "Installing Git with pkgin...\n\n"
          sudo /usr/pkg/bin/pkgin -y in scmgit-base scmgit-docs
          sudo ln -sf /usr/pkin/bin/git* /usr/bin/git*
          break
          ;;
      [nN][oO]|[nN])
          break
          ;;
      *)
          echo "Please answer yes or no..."
    esac
done

sudo -v # Keep sudo authentication open

# Check to see if user installed from pkgsrc
if [ $(/usr/pkg/bin/pkgin list | grep '^scmgit' | wc -l) -gt 0 ]; then
  echo ''
  echo -e ""$GREEN"Succsessfully installed Git from pkgsrc!"$ESC""
fi

# Update user's shell rc file with new $PATH
echo ''
echo -e "Updating \$PATH variable so new binaries can be found...\n"
echo -e "/usr/pkg/bin\n/usr/pkg/sbin\n/opt/X11/bin" | pbcopy # Copy new binary paths, line-by-line to clipboard
echo -e ""$YELLOW_UL"New binary paths copied to clipboard"$ESC""  
echo ''
while :
do
  read -r -p "Please choose an editor to edit your system-wide PATH & shell's rc file with [nano/vim]: " ED_SEL
     case $ED_SEL in                                                  #
       vim)                                                           #   Ask user which editor to use to
         EDITOR="vim"                                                 #   add the $PATH to their shell's rc file
         break                                                        #
         ;;
       nano)
         EDITOR="nano"
         break
         ;;
       *)
        echo "Please select nano or vim..." 
        echo ''
     esac
done

sudo -v # Keep sudo authentication open

echo -e "$EDITOR selected...\n"
echo ''
echo "First, we need to add the new binary paths system-wide"
echo "In a moment you will be dropped into the file that defines the system-wide PATH"
echo -e "Please simply "$YELLOW"paste the contents of the clipboard at the beggining of the file"$ESC""
echo ''
read -r -p "Press [Enter] to continue..."
sudo $EDITOR /etc/paths
echo ''
echo -e ""$GREEN"That should be the system-wide PATH updated..."$ESC""

echo ''
echo -e "Now we need to edit your shell's rc file...\n"

sudo -v # Keep sudo authentication open

# Check user's shell
SHELLRC=~/.$(echo $SHELL | cut -d'/' -f3)rc
echo "It looks like your shell is $SHELL"
# Use the user defined editor to edit the shell rc file
if [ ! -f ${SHELLRC} ]; then
  echo -e "It doesn't look like $SHELLRC exists...\nA new shell rc will be created\n"
fi

echo -e "if [ -x /usr/libexec/path_helper ]; then\n    eval \`/usr/libexec/path_helper -s\`\nfi" | pbcopy

echo -e "Proceeding to edit "$BLUE"$SHELLRC"$ESC" with "$GREEN"$EDITOR"$ESC".\n\n"$YELLOW_UL"Please paste the clipboard at the end of the file, save and exit"$ESC""
echo ''
read -r -p "Press [Enter] to continue..."
$EDITOR $SHELLRC
source $SHELLRC
echo ''
echo -e ""$GREEN"That should be your \$PATH updated in $SHELLRC"$ESC"\n\n"
read -r -p "Press [Enter] to continue..."

sudo -v # Keep sudo authentication open

# Clone Save OS X git repo and run through the other scripts
git clone git://github.com/Phyrne/saveosx /tmp/saveosx
cd /tmp/saveosx
sudo -v # Keep sudo authentication open
sudo ./scripts/x-setup

# Final screen!
clear
MESSAGE=""$GREEN_UL"Hurrah! You Saved OS X!"$ESC""
title
echo ''
echo ''
echo -e "All processes are complete! So what now? Well, we reccomend you read the"
echo -e "manpage for pkgin at least, as you'll be managing all your non-Apple software"
echo -e "with this excellent package manager."
echo ''
echo -e "From here, get your X11 environment set up, and more importantly; enjoy!"
echo ''
echo -e ""$BLUE"Please visit "$BLUE_UL"http://saveosx.org/"$ESC""$BLUE" for all the latest news and other ramblings from the authors:"$ESC""
echo -e ""$YELLOW"Youri Mouton & Calum MacRae"$ESC""
echo ''
echo "You can reach us at: youri.mout@gmail.com & calum0macrae@gmail.com"
echo -e "\n\n"
echo -e ""$GREEN"Thanks for using Save OS X!"$ESC""
exit 0
