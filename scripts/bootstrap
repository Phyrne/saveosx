#! /bin/bash

# Ensure script is not being run with root privileges
if [ $EUID -eq 0 ]; then
   echo "Please don't run this script with root priveleges!"
   exit 1
fi

# Ensure script is being run in Terminal.app (due to launchctl restrictions)
if [[ $TERM_PROGRAM != "Apple_Terminal" || $TERM_PROGRAM == "" ]]; then
  echo "This script must be run in Apple's Terminal.app"
  echo "Please re-run this script in Terminal.app..."
  exit 1
fi

# Ensure the user is running this script on OS X
if [ $(uname -s) != "Darwin" ]; then
    echo "This script is for use with OS X!"
    exit 1
fi

# Ensure the user is running on an x86_64 system
if [ $(uname -m) != 'x86_64' ] ; then
 echo ""$RED_UL"We only support x86_64 systems!"$ESC""
 exit 1
fi
# Fancy title function
title() {
  COLUMNS=$(tput cols)
  tput clear
  Y=$((($COLUMNS-${#MESSAGE})/2))
  X=1
  tput cup $X $Y
  echo -e "${MESSAGE}"
}

# Safe run function to ensure commands are executed successfully
saferun() {
  typeset cmnd="$*"
  typeset ret_code

  eval  $cmnd
  ret_code=$?
  
  if [ $ret_code != 0 ]; then
     echo -e ""$RED_UL"\n\nIt looks like there was an issue "$ERR_MSG"!"$ESC"\n\nExiting..."
     exit $?
  fi
}

# ANSI properties/colours
ESC='\033[0m'
BLUE='\033[38;34m'
BLUE_UL='\033[38;4;34m'
GREEN='\033[38;32m'
GREEN_UL='\033[38;4;32m'
RED='\033[38;31m'
RED_UL='\033[38;4;31m'
YELLOW='\033[38;33m'
YELLOW_UL='\033[38;4;33m'

# First, drop any chached sudo access (sudo does not require a password to perform this function)
sudo -k

# Welcome screen
MESSAGE=""$BLUE_UL"Welcome to Save OS X!"$ESC""

title
cat << EOM

Welcome to the Save OS X project, an effort to make OS X
a more comfortable system for hackers, developers & power users.

This script will set up your environment for you. It will automatically
install pkgsrc & its associated binary package manager - pkgin.
You will also have the choice to install Git & apply a seamless
X11 environment that we've hacked up for you!

Please enter your password for sudo authentication

EOM

ERR_MSG="authenticating sudo access.\nPlease ensure you typed your password correctly" # Set error message to be echo'd should sudo authentication fail
saferun sudo echo "sudo authenticaion successful!" # Prompt for initial sudo password (will be updated througout with `sudo -v`)
echo 
read -r -p "Press [Enter] to continue..."

# Grab pkgsrc
MESSAGE=""$RED_UL"pkgsrc/pkgin"$ESC""
title
cat << EOM

`echo -e ""$YELLOW_UL"pkgsrc"$ESC""`
pkgsrc is a framework for building third-party software on NetBSD and other UNIX-like systems,
currently containing over 12000 packages. It is used to enable freely available software to be
configured and built easily on supported platforms.

`echo -e ""$YELLOW_UL"pkgin"$ESC""`
The pkgin command is aimed at being an apt/yum like tool for managing pkgsrc binary packages.
It relies on pkg_summary(5) for installation, removal and upgrade ofpackages and associated 
dependencies, using a remote repository.

Proceeding to download and install pkgsrc/pkgin tools....

EOM

# Check for Home Brew install
if [ -f /usr/local/bin/brew ]; then
cat -<< EOM

`echo -e ""$RED"It looks like you have Home Brew installed. This could seriously conflict with pkgsrc!"`
`echo -e "As we don't wish to affect what you may have implemented, we'll leave it up to you to" `
`echo -e "remove it."$ESC""`

`echo -e ""$BLUE_UL"Once your system is rid of Home Brew; simply re-run this script to get going again!"$ESC""`

For now, here are the steps you need to take (with root privileges) to eradicate Home Brew from your system:

cd \`brew --prefix\`
rm -rf Cellar
brew prune
rm \`git ls-files\`
rm -rf Library/{Homebrew,Aliases,Formula,Contributions}
rm -rf .git
rm -rf ~/Library/Caches/Homebrew
rm -rf /usr/local/bin/brew

Note: You may also need to remove ~/.homebrew. If you happen to be using rvm, then ~/.rvm/bin/brew should
      also be deleted.

`echo -e ""$RED_UL"WARNING"$ESC""$RED":  This will remove all software installed with Home Brew!"$ESC""`
EOM
exit 1
fi

# Check for MacPorts install
if [ -f /opt/local/bin/port ]; then
cat << EOM

`echo -e ""$RED"It looks like you have MacPorts installed. This could seriously conflict with pkgsrc!"`
`echo -e "As we don't wish to affect what you may have implemented, we'll leave it up to you to"`
`echo -e "remove it."$ESC""`

`echo -e ""$BLUE_UL"Once your system is rid of MacPorts; simply re-run this script to get going again!"$ESC""`

For now, here are the steps you need to take (with root privileges) to eradicate MacPorts from your system:

port -fp uninstall installed
rm -rf /opt/local
rm -rf /Applications/{DarwinPorts,MacPorts}
rm -rf /Library/{LaunchDaemons/org.macports.*,Receipts/DarwinPorts*.pkg,\\
Receipts/MacPorts*.pkg,Receipts/MacPorts*.pkg,Tcl/darwinports1.0,Tcl/macports1.0}
rm -rf ~/.macports

`echo -e ""$RED_UL"WARNING"$ESC""$RED":  This will remove all software installed with MacPorts!"$ESC""`
EOM
exit 1
fi

# Download and install pkgsrc
echo "Fetching pkgsrc from the Save OS X repo..."
ERR_MSG="retrieving the boostrap tarball from the Save OS X repo" # Set the error message to be echo'd should the curl fail

# Check architecture
if [ ! -f /tmp/bootstrap.tar.gz ] ; then
  saferun curl -s -o /tmp/bootstrap.tar.gz http://pkgsrc.saveosx.org/Darwin/bootstrap/bootstrap-x86_64.tar.gz # Safely retrive the x86_64 pkgsrc bootstrapper from the Save OS X repo
fi

echo -e "pkgsrc retrieved successfully, proceeding to install...\n"
sudo tar xfP /tmp/bootstrap.tar.gz -C / 2>&1 > /dev/null # extract the pkgsrc bootstrap in the root directory
echo -e "\n"$GREEN"pkgsrc installed."$ESC" Adding Save OS X repo..."

# Add Save OS X repo
if [ $(grep 'saveosx' /usr/pkg/etc/pkgin/repositories.conf | wc -l) == 0 ]; then
    echo "http://pkgsrc.saveosx.org/Darwin/2013Q3/x86_64/All" | sudo tee -a /usr/pkg/etc/pkgin/repositories.conf > /dev/null
    echo "Your system has now been set up to use the Save OS X repo!"
elif [ $(grep 'saveosx' /usr/pkg/etc/pkgin/repositories.conf | wc -l) -gt 0 ]; then
    echo "Your system has now been set up to use the Save OS X repo!"
fi

echo 
sudo -v # Keep sudo authentication open
echo "Updating pkgsrc repository information..."
sudo /usr/pkg/bin/pkgin -y update # Update the pkgsrc repository information
sudo -v # Keep sudo authentication open
echo "Package database updated!"
echo
# Ask user if they would like use signed packages
while :
do
  read -r -p "Would you like to use signed packages (recommended)? [y/n/what?] " ANSWER
    case $ANSWER in
      [yY][eE][sS]|[yY])
          USE_GPG=true
          break
          ;;
      [nN][oO]|[nN])
          USE_GPG=false
          echo "VERIFIED_INSTALLATION=never" | sudo tee -a /usr/pkg/etc/pkg_install.conf > /dev/null
          break
          ;;
      [wW][hH][aA][tT][?]|[wW]|[?])
          echo 
          echo "We use PGP to sign our packages as a security mesure, to ensure their integrity."
          echo "We highly recommend you use signed packages."
          echo -e "If you would like to learn more, please visit:\n"$BLUE_UL"http://saveosx.org/signed-packages/"$ESC""
          echo
          ;;
      *)
          echo "Please answer yes, no or 'what?'..."
    esac
done

if [[ $(which gpg | fgrep -v "gpg not found" | wc -l) -lt 1 ]]; then
  export GPG_INSTALLED=false
else
  export GPG_INSTALLED=true
fi


# Set up signed packages if the user wants to
if [[ $USE_GPG == "true" && $GPG_INSTALLED == "false" ]]; then
echo "Fetching GNU PG for signed packages..."
ERR_MESSAGE="retrieving the gnupg package"
saferun sudo /usr/pkg/bin/pkgin -F -dy in gnupg 
echo "Retrieved signed GNU PG package."
echo
echo -e ""$RED"WARNING:"$ESC""
echo "The GNU PG package has been signed using our key, but as package signing has"
echo "not been set up yet (obviously), you can verify this yourself."

while :
do
  read -r -p "Would you like to verify the integrity of this package? [y/n] " ANSWER
    case $ANSWER in
      [yY][eE][sS]|[yY])
cat << EOM
Here's the public key it has been signed with:

`ar -p /var/db/pkgin/cache/gnupg*.tgz | sed -n 42,58p`

And here's the intended signer's key fingerprint:

`echo -e ""$GREEN"Key fingerprint = 81F7 EC68 C5BD 5DED 7A7B  2832 6A09 5CC6 2D99 C8F7"$ESC""`

EOM

while :
do
  read -r -p "Are you satisfied that this package is from a genuine source? [y/n] " ANSWER
    case $ANSWER in
      [yY][eE][sS]|[yY])
          break
          ;;
      [nN][oO]|[nN])
          echo 
          echo "If you believe this package has not been retrieved from the intended source"
          echo "or if you feel that its integrity has been compromised in some way, please"
          echo "contact us immediately:"
          echo
          echo -e "irc:\t#saveosx on irc.oftc.net - either yrmt or cmacrae"
          echo "e-mail:\tyouri.mout@gmail.com / calum0macrae@gmail.com" 
          echo -e ""$RED"Exiting..."$ESC""
          exit 0
          ;;
      *)
          echo "Please answer yes or no..."
    esac
done
        break
        ;;
      [nN][oO]|[nN])
        break
        ;;
      *)
        echo "Please answer yes or no...."
    esac
done
elif [[ $USE_GPG == "true" && $GPG_INSTALLED == "true" ]]; then
  echo "It looks like you already have GPG software installed."
  echo "Set up will continue,  using the existing GPG tool..."
fi


if [[ $USE_GPG == "true" ]]; then
  export PATH=$PATH:/usr/pkg/bin # temporarily export the PATH so gpg can be determined
  echo "Importing yrmt's GPG key..."
  gpg --recv-keys 2D99C8F7 2>&1 > /dev/null
  echo "GPG=`which gpg`" | sudo tee -a /usr/pkg/etc/pkg_install.conf 2>&1 > /dev/null
  echo "VERIFIED_INSTALLATION=always" | sudo tee -a /usr/pkg/etc/pkg_install.conf 2>&1 > /dev/null
fi

read -r -p "Press [Enter] to continue..."

# Git screen
MESSAGE=""$GREEN_UL"Git"$ESC""

title
cat << EOM

Using Save OS X requires Git. Apple's implementation of Git is
included with XCode. Unless you're a developer of software for
OS X/iOS, this isn't necessary

Even if you do have XCode intalled, installing Git from pkgsrc
will get you a more recent revision.

EOM

sudo -v # Keep sudo authentication open

# Ask user if they would like to install Git from pkgsrc
while :
do
  read -r -p "Would you like to install Git from pkgsrc? [y/n] " ANSWER
    case $ANSWER in
      [yY][eE][sS]|[yY])
          ERR_MSG="installing Git with pkgin"
          echo 
          echo -e "Installing Git with pkgin...\n\n"
          sudo /usr/pkg/bin/pkgin -y in git-base git-docs
          for f in /usr/pkg/bin/git* ; do sudo ln -sf ${f} /usr/bin ; done
          break
          ;;
      [nN][oO]|[nN])
          read -r -p "Press [Enter] to continue..."
          break
          ;;
      *)
          echo "Please answer yes or no..."
    esac
done

sudo -v # Keep sudo authentication open

# Check to see if user installed from pkgsrc
if [ -f /usr/pkg/bin/git ]; then
  echo 
  echo -e ""$GREEN"Succsessfully installed Git from pkgsrc!"$ESC""
  read -r -p "Press [Enter] to continue..."
fi

# Grab XQuartz
MESSAGE=""$BLUE_UL"XQuartz + X11 Hacks"$ESC""
title
cat << EOM

`echo -e ""$YELLOW_UL"Xquartz"$ESC""`
XQuartz is an open-source effort to develop a version of the X.Org X Window System that runs on OS X.
Together with supporting libraries and applications, it forms the X11.app that Apple has shipped with
OS X since version 10.5.

`echo -e ""$YELLOW_UL"X11 Hacks"$ESC""`
We've cooked up some hacks for OS X in an attempt to seamlessly implement an X11 environment,
close to how it would be on any other UNIX-like system. This is achieved using a mixture of
some custom launchd scripts, so X launches upon login, and some Aqua UI trickery to hide some
elements.
Coupling the above with the wealth of window managers & desktop environments available in our
package repo, you'll feel right at home!

EOM

# Ask user if they would like to install XQuartz
while :
do
  read -r -p "Would you like to install XQuartz & our X11 Hacks? [y/n] " ANSWER
    case $ANSWER in
      [yY][eE][sS]|[yY])
          export X_INST="true" 
          break
          ;;
      [nN][oO]|[nN])
          export X_INST="false"
          read -r -p "Press [Enter] to continue..."
          break
          ;;
      *)
          echo "Please answer yes or no..."
    esac
done


sudo -v # Keep sudo authentication open

if [ $X_INST == "true" ]; then
  # Clone Save OS X git repo and run through X setup script
  rm -rf /tmp/saveosx 2>&1 > /dev/null
  mkdir /tmp/saveosx
  curl -s -o /tmp/saveosx/x-setup https://raw.githubusercontent.com/cmacrae/saveosx/master/scripts/x-setup
  curl -s -o /tmp/saveosx/xquartz.plist https://raw.githubusercontent.com/cmacrae/saveosx/master/plists/xquartz.plist
  curl -s -o /tmp/saveosx/org.saveosx.startx.plist https://raw.githubusercontent.com/cmacrae/saveosx/master/plists/org.saveosx.startx.plist
  cd /tmp/saveosx
  sudo -v # Keep sudo authentication open
  bash x-setup
fi

# PATH screen
MESSAGE=""$GREEN_UL"Update System PATH"$ESC""

title
# Prepend binary dirs to system-wide path
echo 
echo -e "Updating \$PATH so new binaries can be found...\n"
echo -e "/usr/pkg/bin\n/usr/pkg/sbin\n/opt/X11/bin" | sudo tee -a /etc/paths.d/saveosx > /dev/null
echo -e "Updating \$MANPATH so new manpages can be found...\n"
echo -e "MANPATH /usr/pkg/man\nMANPATH /usr/pkg/share/man" | sudo tee -a /etc/man.conf > /dev/null

sudo -v # Keep sudo authentication open

# Check user's shell
SHELLRC=~/.$(echo $SHELL | cut -d'/' -f3)rc
echo "It looks like your shell's rc file is $SHELLRC"
while :
do
  read -r -p "Add system PATH evaluation to $SHELLRC or another file? [yes/other] " ANSWER
    case $ANSWER in
      [yY][eE][sS]|[yY])
        break
        ;;
      [oO][tT][hH][eE][rR])
        export SHELLRC="user_defined" 
        break
        ;;
      *)
        echo "Please answer 'yes' or 'other'..."
        echo 
    esac
done

# Ask for user's shell if necessary
if [ ${SHELLRC} == "user_defined" ]; then
  read -r -p "Please enter the full path to your shell's rc file: " SHELLRC
  export SHELLRC
fi

if [ ! -f ${SHELLRC} ]; then
  echo -e "It doesn't look like $SHELLRC exists...\nA new shell rc will be created\n"
fi

# Update user's shell rc file with new $PATH 
echo -e "\n# Evaluate system PATH\nif [ -x /usr/libexec/path_helper ]; then\n    eval \`/usr/libexec/path_helper -s\`\nfi" >> ${SHELLRC}

# Evaluate system path to circumvent explicit calls of new binaries
if [ -x /usr/libexec/path_helper ]; then
  eval `/usr/libexec/path_helper -s`
fi

echo 
echo -e ""$GREEN"Your system's \$PATH has been updated"$ESC"\n\n"
read -r -p "Press [Enter] to continue..."

# Final screen!
MESSAGE=""$GREEN_UL"Hurrah! You Saved OS X!"$ESC""
title
cat << EOM

All processes are complete! So what now? Well, we reccomend you read the
manpage for pkgin at least, as you'll be managing all your non-Apple software
with this excellent package manager.

From here, if you opte for X, get your environment set up, and more importantly; enjoy!

EOM
echo -e ""$BLUE"Please visit "$BLUE_UL"http://saveosx.org/"$ESC""$BLUE" for all the latest news and other ramblings from the authors:"$ESC""
echo -e ""$YELLOW"Youri Mouton & Calum MacRae"$ESC""
echo 
echo "You can reach us at: youri.mout@gmail.com & calum0macrae@gmail.com"
echo -e "\n\n"
echo -e ""$GREEN"Thanks for using Save OS X!"$ESC""
exit 0
