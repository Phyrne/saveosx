#! /bin/bash

# Ensure script is not being run with root privileges
if [[ $EUID -eq 0 ]]; then
   echo "Please don't run this script with root priveleges!"
   exit 1
fi


# Fancy title function
title() {
  COLUMNS=$(tput cols)
  tput clear
  Y=$((($COLUMNS-${#MESSAGE})/2))
  X=1
  tput cup $X $Y
  echo -e "${MESSAGE}"
}

# Safe run function to ensure commands are executed successfully
saferun() {
  typeset cmnd="$*"
  typeset ret_code

  eval  $cmnd
  ret_code=$?
  
  if [ $ret_code != 0 ]; then
     echo -e ""$RED_UL"\n\nIt looks like there was an issue "$ERR_MSG"!"$ESC"\n\nExiting..."
     exit $?
  fi
}

# ANSI properties/colours
ESC='\033[0m'
BOLD='\033[1m'
BLUE='\033[38;34m'
BLUE_UL='\033[38;4;34m'
GREEN='\033[38;32m'
GREEN_UL='\033[38;4;32m'
CYAN='\033[38;36m'
CYAN_IL='\033[38;4;36m'
RED='\033[38;31m'
RED_UL='\033[38;4;31m'
PURPLE='\033[38;35m'
PURPLE_UL='\033[38;4;35m'
YELLOW='\033[38;33m'
YELLOW_UL='\033[38;4;33m'

# First, drop any chached sudo access (sudo does not require a password to perform this function)
sudo -k

# Welcome screen
MESSAGE=""$BLUE_UL"Welcome to Save OS X!"$ESC""

title
echo ''
echo -e "Here's some stuff about the project that will be echo'd\non the first screen of the script\n"
echo ''
ERR_MSG="authenticating sudo access.\nPlease ensure you typed your password correctly" # Set error message to be echo'd should sudo authentication fail
read -r -p "Press [Enter] to provide your sudo password and proceed "
saferun sudo echo "sudo authenticaion successful!" # Prompt for initial sudo password (will be updated througout with `sudo -v`)
sleep 1
clear

# Grab essential tools (pkgsrc & Xquartz)
MESSAGE=""$RED_UL"Essential Tools$ESC"
title
echo ''
echo -e "This project uses "$BOLD"pkgsrc"$ESC" & "$BOLD"XQuartz"$ESC"\n"
echo ''
echo "Proceeding to download and install essential tools"
echo ''
sudo -v # Keep sudo authentication open

# Download and install pkgsrc
echo "Fetching pkgsrc from the Save OS X repo..."
ERR_MSG="retrieving the boostrap tarball from the Save OS X repo" # Set the error message to be echo'd should the curl fail
saferun curl -s -o /tmp/bootstrap.tar.gz http://saveosx.org/packages/Darwin/bootstrap/bootstrap.tar.gz # Safely attempt to retrive the pkgsrc bootstrapper from the Save OS X repo, if it fails, exit
sudo -v # Keep sudo authentication open
echo -e "pkgsrc retrieved successfully, proceeding to install...\n"
cd /; sudo tar xf /tmp/bootstrap.tar.gz 2>&1 > /dev/null # extract the pkgsrc bootstrap in the root directory
echo -e "\n"$GREEN"pkgsrc installed."$ESC" Adding SmartOS & Save OS X repos..."
sudo chmod a+w /usr/pkg/etc/pkgin/repositories.conf                                                    # Add SmartOS & Save OS X pkgsrc repos
echo "http://pkgsrc.smartos.org/packages/Darwin/2013Q2/All" >> /usr/pkg/etc/pkgin/repositories.conf    # 
echo "http://saveosx.org/packages/Darwin/2013Q2/All" >> /usr/pkg/etc/pkgin/repositories.conf           # No sudo access to file
sudo chmod og-w /usr/pkg/etc/pkgin/repositories.conf                                                   # Temporarily drop permissions
echo ''
sudo -v # Keep sudo authentication open
echo "Updating pkgsrc repository information..."
sudo pkgin -y update # Update the pkgsrc repository information
sudo -v # Keep sudo authentication open
echo ''

# Fetch & install XQuartz if it isn't already installed
if [[ $(system_profiler SPApplicationsDataType | grep XQuartz | wc -l) -lt 1 ]]; then
  echo ''
  ERR_MSG="retrieving the XQuartz disk image"
  echo "Fetching XQuartz..."
  saferun curl -s -o /tmp/xquartz.dmg http://xquartz.macosforge.org/downloads/SL/XQuartz-2.7.4.dmg
  sudo -v # Keep sudo authentication open
  ERR_MSG="mounting the XQuartz disk image"
  echo "Mounting XQuartz disk image..."
  saferun hdiutil mount -mountpoint /Volumes/xquartz /tmp/xquartz.dmg 1>/dev/null # Mount XQuartz disk image, safely should failure occur
  ERR_MSG="installing XQuartz"
  echo "Installing XQuartz..."
  saferun sudo installer -pkg /Volumes/xquartz/XQuartz.pkg -target /
  echo -e "\n"$GREEN"XQuartz installed successfully!"$ESC""
  export PATH=/usr/pkg/bin:/usr/pkg/sbin:/opt/X11/bin:$PATH # Update path so new binaries can be found (including X11 apps)
  umount /Volumes/xquartz
else
  echo -e "\n"$GREEN"It looks like XQuartz is already installed..."$ESC""
  export PATH=/usr/pkg/bin:/usr/pkg/sbin:$PATH # Update path to so new binaries can be found (not including X11 apps)
fi

sudo -v # Keep sudo authentication open

# Git screen
MESSAGE=""$GREEN_UL"Git"$ESC""

title
echo
echo "Using Save OS X requires Git. Apple's implementation of Git is"
echo "Included with XCode. Unless you're a developer of software for"
echo "OS X/iOS, this isn't necessary"
echo ''
echo "Even if you do have XCode intalled, installing Git from the official"
echo "website will get you a more recent revision."
echo ''
read -r -p "Press [Enter] to install Git from the official Git website..."

# Fetch Git from git-scm.com
echo ''
ERR_MSG="retrieving the Git disk image"
echo "Fetching Git..."
saferun curl -s -o /tmp/git.dmg https://git-osx-installer.googlecode.com/files/git-1.8.3.2-intel-universal-snow-leopard.dmg
sudo -v # Keep sudo authentication open
# Install Git & symlink over Apple's dummy binaries
ERR_MSG="mounting the Git disk image"
echo "Mounting Git disk image..."
saferun hdiutil mount -mountpoint /Volumes/git /tmp/git.dmg 1> /dev/null
ERR_MSG="installing Git"
echo "Installing Git..."
saferun sudo installer -pkg /Volumes/git/*.pkg -target /
saferun sudo ln -sf /usr/local/git/bin/* /usr/bin/
echo -e "\n"$GREEN"Git installed successfully!"$ESC""

# Update user's shell rc file with new $PATH
echo -e "Updating \$PATH variable so new binaries can be found...\n"
echo $PATH | pbcopy # Copy the $PATH to the clipboard
echo -e ""$YELLOW_UL"\$PATH copied to clipboard"$ESC""  
echo ''
while :
do
  read -r -p "Please choose an editor to edit your shell's rc file with [nano/vim]: " ED_SEL
     case $ED_SEL in                                                  #
       vim)                                                           #   Ask user which editor to use to
         EDITOR="vim"                                                 #   add the $PATH to their shell's rc file
         break                                                        #
         ;;
       nano)
         EDITOR="nano"
         break
         ;;
       *)
        echo "Please select nano or vim..." 
     esac
done
# Check user's shell
SHELLRC=~/.$(echo $SHELL | cut -d'/' -f3)rc
echo -e "$EDITOR selected...\n\nIt looks like your shell is $SHELL"

# Use the user defined editor to edit the shell rc file
if [ ! -f ${SHELLRC} ]; then
  echo -e "It doesn't look like $SHELLRC exists...\nA new shell rc will be created, simply paste the \$PATH into the file\n"
fi
echo -e "Proceeding to edit "$BLUE"$SHELLRC"$ESC" with "$GREEN"$EDITOR"$ESC".\n\n"$YELLOW_UL"Please paste the \$PATH variable, save and exit"$ESC""
echo ''
read -r -p "Press [Enter] to continue..."
$EDITOR $SHELLRC

