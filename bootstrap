#! /bin/bash

# Copyright Â© 2015 Calum MacRae
# Use of this source code is governed by an ISC
# license that can be found in the LICENSE file.

######################################
# A bootstrapper to set-up Save OS X #
######################################

# Sanity checks
sanity(){
    # Ensure the user is running this script on OS X
    if [ $(uname -s) != "Darwin" ]; then
	echo "This script is for use with OS X!"
	exit 1
    fi

    # Ensure script is not being run with root privileges
    if [ $EUID -eq 0 ]; then
	echo "Please don't run this script with root priveleges!"
	exit 1
    fi

    # Check for Home Brew install
    if [ -f /usr/local/bin/brew ]; then
	echo -e ""$RED"It looks like you have Home Brew installed. This could seriously conflict with pkgsrc!"
	echo -e "As we don't wish to affect what you may have implemented, we'll leave it up to you to remove it."$ESC""
	exit 1
    fi

    # Check for MacPorts install
    if [ -f /opt/local/bin/port ]; then
	echo -e ""$RED"It looks like you have MacPorts installed. This could seriously conflict with pkgsrc!"
	echo -e "As we don't wish to affect what you may have implemented, we'll leave it up to you to remove it."$ESC""
	exit 1
    fi
}

# Safe run function to ensure commands are executed successfully
saferun() {
    typeset cmnd="$*"
    typeset ret_code

    eval  $cmnd
    ret_code=$?
    
    if [ $ret_code != 0 ]; then
	echo -e ""$RED_UL"\n\nIt looks like there was an issue running: $*"$ESC"\n\nExiting..."
	exit $?
    fi
}

main() {
    # ANSI properties/colours
    local ESC='\033[0m'
    local BLUE='\033[38;34m'
    local BLUE_UL='\033[38;4;34m'
    local GREEN='\033[38;32m'
    local GREEN_UL='\033[38;4;32m'
    local RED='\033[38;31m'
    local RED_UL='\033[38;4;31m'
    local YELLOW='\033[38;33m'
    local YELLOW_UL='\033[38;4;33m'

    # pkgsrc site/bootstrap properties
    local PKGSRC_SITE="https://pkgsrc.joyent.com/packages/Darwin"
    local PKGSRC_QUARTER="2015Q3"
    local BOOTSTRAP_URL="${PKGSRC_SITE}/bootstrap/"
    local BOOTSTRAP_TAR="bootstrap-${PKGSRC_QUARTER}-x86_64.tar.gz"
    local BOOTSTRAP_PATH="/tmp/${BOOTSTRAP_TAR}"
    local BOOTSTRAP_SHA="ac06f891bd1fb3f2dbaeccba731a2d9f68bbc925da8adfa8d0b865a51ca79c4b"
    local REPO_GPGKEY="0xDE817B8E"

    echo -e "\n"$BLUE_UL"Welcome to Save OS X!"$ESC""
    echo
    echo "Welcome to the Save OS X project, an effort to make OS X"
    echo "a more comfortable system for hackers, developers & power users"
    echo "by providing fast, secure, 64bit binary package management using"
    echo -e "the excellent "$YELLOW_UL"pkgsrc"$ESC" from the NetBSD project!"
    echo
    echo "This script will set up your environment for you. It will automatically"
    echo "install pkgsrc & its associated binary package manager - pkgin, with signed"
    echo "packages, and set up your path environments so binaries and man-pages can"
    echo "be found."
    echo
    echo "Please enter your password for sudo authentication"

    # Prompt for initial sudo password & keep alive
    sudo -k
    saferun sudo echo "sudo authenticaion successful!"
    while true ; do sudo -n true ; sleep 60 ; kill -0 "$$" || exit ; done 2>/dev/null &

    # Download the bootstrap, if not already there
    if [ ! -f $BOOTSTRAP_PATH ]; then
	echo -e ""$YELLOW"Fetching pkgsrc bootstrap from Joyent's pkgsrc repo..."$ESC""
	saferun curl -o $BOOTSTRAP_PATH "${BOOTSTRAP_URL}/${BOOTSTRAP_TAR}"
    fi

    # Verify the bootstrap integrity
    echo "Verifying bootstrap integrity..."
    echo "$BOOTSTRAP_SHA  $BOOTSTRAP_PATH" | shasum -a 256 -c - || exit 1

    # extract the pkgsrc bootstrap in the root directory
    echo -e "pkgsrc retrieved successfully, proceeding to install..."
    saferun sudo tar xfP $BOOTSTRAP_PATH -C / &> /dev/null
    echo -e ""$GREEN"pkgsrc installed."$ESC""
    echo 
    echo -e ""$YELLOW"Updating pkgin repository information..."$ESC""
    saferun sudo /opt/pkg/bin/pkgin -y update # Update the pkgsrc repository information
    echo "Package database updated!"
    echo -e "\n"$YELLOW"Setting up GPG for signed packages..."$ESC""
    if [ ! $(command -v gpg &> /dev/null) ]; then
	echo "It doesn't look like GPG is installed"
	echo "Installing gnupg from Joyent's repo"
	saferun sudo /opt/pkg/bin/pkgin -y in gnupg
	export PATH=$PATH:/opt/pkg/sbin:/opt/pkg/bin
    fi
    echo -e ""$YELLOW"Importing Joyent's repo GPG key..."$ESC""
    saferun gpg --keyserver hkp://keys.gnupg.net --recv-keys $REPO_GPGKEY &> /dev/null
    echo -e ""$BLUE"\nImported Joyent's repo GPG key successfully!"$ESC""
    echo -e "Verifying repo's GPG integrity..."
    saferun curl -s -o "${BOOTSTRAP_PATH}.asc" "${BOOTSTRAP_URL}/${BOOTSTRAP_TAR}.asc"
    saferun gpg --verify "${BOOTSTRAP_PATH}.asc" &> /dev/null
    echo -e ""$BLUE"Looks good!"$ESC""

    # Add binary dirs to system-wide path
    echo 
    echo -e ""$YELLOW"Updating \$PATH so new binaries can be found..."$ESC""
    if [ ! -f /etc/paths.d/pkgsrc  ]; then
	echo -e "/opt/pkg/bin\n/opt/pkg/sbin" | sudo tee -a /etc/paths.d/pkgsrc > /dev/null
    fi

    echo -e "Updating \$MANPATH so new manpages can be found..."
    if [ ! -f /etc/manpaths.d/pkgsrc ]; then
	echo -e "MANPATH /opt/pkg/man\nMANPATH /opt/pkg/share/man" | sudo tee -a /etc/manpaths.d/pkgsrc > /dev/null
    fi
    
    # Set up PATH eval in user's shellrc
    SHELLRC=~/.$(echo $SHELL | awk -F/ '{print$NF}')rc

    if [ -f $SHELLRC ]; then
	echo "It looks like your shell's rc file is $SHELLRC"
    else
	echo -e "It doesn't look like $SHELLRC exists...\nA new shell rc will be created\n"
    fi

    # Update user's shell rc file with new $PATH 
    if [[ ! $(fgrep "path_helper" $SHELLRC) ]]; then
	echo "Adding proper PATH evaluation to $SHELLRC"
	echo -e "\n# Evaluate system PATH\nif [ -x /usr/libexec/path_helper ]; then\n    eval \`/usr/libexec/path_helper -s\`\nfi" >> $SHELLRC
    else
	echo "It looks like you already have proper PATH evaluation in $SHELLRC"
    fi

    if [ -x /usr/libexec/path_helper ]; then
	eval `/usr/libexec/path_helper -s`
    fi

    echo -e "Your system's \$PATH has been updated"

    # Final screen!
    echo -e "\n"$GREEN_UL"Hurrah! You Saved OS X!"$ESC""
    echo
    echo "All processes are complete! So what now? Well, you should probably read the"
    echo "manpage for pkgin at least, as you'll be managing all your non-Apple software"
    echo "with this excellent package manager."
    echo
    echo -e ""$GREEN"Thanks for using Save OS X!"$ESC""
    exit 0
}

# Actual run
clear
sanity
main
